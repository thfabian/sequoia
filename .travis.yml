dist: trusty
sudo: false

language: c++

#===---------------------------------------------------------------------------------------------===
#   Environment
#===---------------------------------------------------------------------------------------------===

# APT packages shared by all configurations 
addons:
  apt:
    sources: 
      - ubuntu-toolchain-r-test
    packages:
      - g++-5
      - gcc-5

      # Sequoia deps
      - libtbb-dev

      # OpenCV deps
      - libjpeg-dev 
      - libpng12-dev 
      - libtiff4-dev 
      - libjasper-dev 

      # glfw3 deps
      - libx11-6
      - libxcursor1
      - libxi6
      - libxinerama1
      - libxrandr2
      - libxxf86vm1

os:
  - linux

env:
  global:
    - BOOST_VERSION=1.63.0
    - CMAKE_VERSION=3.6.1
    - GLBINDING_VERSION=2.1.1
    - OPENCV_VERSON=3.2.0

matrix:
  include:
    # Linux GCC 5.4 (Release)
    - os: linux
      compiler: gcc
      env: CONFIG=Release CXX_COMPILER=g++-5 C_COMPILER=gcc-5
    
    # Linux GCC 5.4 (RelWithDebInfo)
    - os: linux
      compiler: gcc
      env: CONFIG=RelWithDebInfo CXX_COMPILER=g++-5 C_COMPILER=gcc-5


# Cache external dependencies
cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/install/boost-${BOOST_VERSION}
    - ${TRAVIS_BUILD_DIR}/deps/install/cmake-${CMAKE_VERSION}
    - ${TRAVIS_BUILD_DIR}/deps/install/glbinding-${GLBINDING_VERSION}
    - ${TRAVIS_BUILD_DIR}/deps/install/opencv-${OPENCV_VERSON}

#===---------------------------------------------------------------------------------------------===
#   Installing (external dependencies)
#===---------------------------------------------------------------------------------------------===

install:
  # Create deps dir if not existing
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR}

  # External dependencies are always built with gcc 5
  - export CXX=g++-5
  - export CC=gcc-5

  # Start building external dependencies
  - pushd $(pwd)
  - cd ${DEPS_DIR}

  # Install CMake
  - |
    CMAKE_INSTALL_DIR=${DEPS_DIR}/install/cmake-${CMAKE_VERSION}
    if [[ -z "$(ls -A ${CMAKE_INSTALL_DIR})" ]]; then
      CMAKE_SHORT_VERSION=${CMAKE_VERSION%.*}
      { travis_retry wget                                                                          \
        https://cmake.org/files/v${CMAKE_SHORT_VERSION}/cmake-${CMAKE_VERSION}.tar.gz; } || exit 1 
      tar xfz cmake-${CMAKE_VERSION}.tar.gz
      (cd cmake-${CMAKE_VERSION} && ./configure --prefix=${CMAKE_INSTALL_DIR} && make install)
    fi
    export PATH="${CMAKE_INSTALL_DIR}/bin:${PATH}"

  # Install OpenCV
  - |
    OPENCV_INSTALL_DIR=${DEPS_DIR}/install/opencv-${OPENCV_VERSON}
    if [[ -z "$(ls -A ${OPENCV_INSTALL_DIR})" ]]; then
      { travis_retry wget https://github.com/opencv/opencv/archive/${OPENCV_VERSON}.tar.gz; } ||   \
        exit 1
      tar xfz ${OPENCV_VERSON}.tar.gz
      pushd $(pwd)
      mkdir opencv-${OPENCV_VERSON}/build && cd opencv-${OPENCV_VERSON}/build
      cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_PNG:BOOL=ON -DWITH_TIFF:BOOL=ON                   \
               -DWITH_JPEG:BOOL=ON -DBUILD_opencv_core:BOOL=ON -DBUILD_opencv_highgui:BOOL=ON      \
               -DBUILD_opencv_imgcodecs:BOOL=ON -DBUILD_opencv_imgproc:BOOL=ON                     \
               -DCMAKE_INSTALL_PREFIX=${OPENCV_INSTALL_DIR}
      make install
      popd
    fi
    export OpenCV_DIR="${OPENCV_INSTALL_DIR}/share/OpenCV"

  # Install glbinding
  - |
    GLBINDING_INSTALL_DIR=${DEPS_DIR}/install/glbinding-${GLBINDING_VERSION}
    if [[ -z "$(ls -A ${GLBINDING_INSTALL_DIR})" ]]; then
      { travis_retry wget                                                                          \
        https://github.com/cginternals/glbinding/archive/v${GLBINDING_VERSION}.tar.gz; } || exit 1
      tar xfz v${GLBINDING_VERSION}.tar.gz
      pushd $(pwd)
      mkdir glbinding-${GLBINDING_VERSION}/build && cd glbinding-${GLBINDING_VERSION}/build
      cmake .. -DCMAKE_BUILD_TYPE=Release -DOPTION_BUILD_DOCS:BOOL=OFF                             \
               -DOPTION_BUILD_EXAMPLES:BOOL=OFF -DOPTION_BUILD_TESTS:BOOL=OFF                      \
               -DCMAKE_INSTALL_PREFIX=${GLBINDING_INSTALL_DIR}
      make install
      popd
    fi
    export GLBINDING_ROOT="${GLBINDING_INSTALL_DIR}"


  # Install boost
  - |
    BOOST_INSTALL_DIR=${DEPS_DIR}/install/boost-${BOOST_VERSION}
    if [[ -z "$(ls -A ${BOOST_INSTALL_DIR})" ]]; then
      
      BOOST_URL=$(printf "http://sourceforge.net/projects/boost/files/boost/%s/boost_%s.tar.gz"    \
                  ${BOOST_VERSION} ${BOOST_VERSION//\./_})
      
      mkdir -p ${BOOST_INSTALL_DIR}
      { travis_retry wget --quiet -O - ${BOOST_URL} |                                              \
        tar --strip-components=1 -xz -C ${BOOST_INSTALL_DIR}; } || exit 1
      
      GCC_VERSION=$($CXX -dumpversion)
      pushd $(pwd)
      cd ${BOOST_INSTALL_DIR}
      echo "using gcc : ${GCC_VERSION} : ${CXX} ;" > user-config.jam
      ./bootstrap.sh
      ./b2 -j2 --toolset=gcc-${GCC_VERSION} --prefix=${BOOST_INSTALL_DIR}                          \
               --user-config=${BOOST_INSTALL_DIR}/user-config.jam                                  \
               --with-thread                                                                       \
               --with-date_time                                                                    \
               --with-atomic                                                                       \
               --with-chrono                                                                       \
               --with-filesystem                                                                   \
               --with-program_options                                                              \
               --d+2 install
      popd
    fi
    export BOOST_ROOT="${BOOST_INSTALL_DIR}"

  - ls ${OpenCV_DIR}
  - ls ${GLBINDING_ROOT}
  - ls ${BOOST_ROOT}
  - popd

#===---------------------------------------------------------------------------------------------===
#   Building
#===---------------------------------------------------------------------------------------------=== 

before_script:
  # Setup the X-Server and initialize a virtual display of 1280x1024x16
  - export DISPLAY=:99.0
  - |
    /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile       \
                            --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16
  - sleep 3

  # Make sure C++ and C compilers are set correctly
  - export CXX=${CXX_COMPILER}
  - export CC=${C_COMPILER}
  - export CMAKE_BUILD_TYPE=${CONFIG}

  - $CC --version
  - $CXX --version

#===---------------------------------------------------------------------------------------------===
#   Testing
#===---------------------------------------------------------------------------------------------=== 

script:
  - pushd $(pwd)


notifications:
  on_success: never
  on_failure: never